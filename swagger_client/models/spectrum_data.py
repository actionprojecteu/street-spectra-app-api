# coding: utf-8

"""
    StreetSpectra API

    API description for StreetSpectra project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jgcasta@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpectrumData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'ts_gps': 'datetime',
        'lon': 'float',
        'lat': 'float',
        'orientation': 'float',
        'tilt': 'float',
        'spectrum_type': 'float',
        'img_filename': 'str'
    }

    attribute_map = {
        'username': 'username',
        'ts_gps': 'ts_gps',
        'lon': 'lon',
        'lat': 'lat',
        'orientation': 'orientation',
        'tilt': 'tilt',
        'spectrum_type': 'spectrum_type',
        'img_filename': 'img_filename'
    }

    def __init__(self, username=None, ts_gps=None, lon=None, lat=None, orientation=None, tilt=None, spectrum_type=None, img_filename=None):  # noqa: E501
        """SpectrumData - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._ts_gps = None
        self._lon = None
        self._lat = None
        self._orientation = None
        self._tilt = None
        self._spectrum_type = None
        self._img_filename = None
        self.discriminator = None

        self.username = username
        self.ts_gps = ts_gps
        self.lon = lon
        self.lat = lat
        if orientation is not None:
            self.orientation = orientation
        if tilt is not None:
            self.tilt = tilt
        if spectrum_type is not None:
            self.spectrum_type = spectrum_type
        if img_filename is not None:
            self.img_filename = img_filename

    @property
    def username(self):
        """Gets the username of this SpectrumData.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this SpectrumData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SpectrumData.

        Username  # noqa: E501

        :param username: The username of this SpectrumData.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def ts_gps(self):
        """Gets the ts_gps of this SpectrumData.  # noqa: E501

        UTC GPS timestamp  # noqa: E501

        :return: The ts_gps of this SpectrumData.  # noqa: E501
        :rtype: datetime
        """
        return self._ts_gps

    @ts_gps.setter
    def ts_gps(self, ts_gps):
        """Sets the ts_gps of this SpectrumData.

        UTC GPS timestamp  # noqa: E501

        :param ts_gps: The ts_gps of this SpectrumData.  # noqa: E501
        :type: datetime
        """
        if ts_gps is None:
            raise ValueError("Invalid value for `ts_gps`, must not be `None`")  # noqa: E501

        self._ts_gps = ts_gps

    @property
    def lon(self):
        """Gets the lon of this SpectrumData.  # noqa: E501

        Image Longitude WGS84  # noqa: E501

        :return: The lon of this SpectrumData.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this SpectrumData.

        Image Longitude WGS84  # noqa: E501

        :param lon: The lon of this SpectrumData.  # noqa: E501
        :type: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def lat(self):
        """Gets the lat of this SpectrumData.  # noqa: E501

        Image Laitude WGS84  # noqa: E501

        :return: The lat of this SpectrumData.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SpectrumData.

        Image Laitude WGS84  # noqa: E501

        :param lat: The lat of this SpectrumData.  # noqa: E501
        :type: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def orientation(self):
        """Gets the orientation of this SpectrumData.  # noqa: E501

        Camera orientation from north in degrees  # noqa: E501

        :return: The orientation of this SpectrumData.  # noqa: E501
        :rtype: float
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this SpectrumData.

        Camera orientation from north in degrees  # noqa: E501

        :param orientation: The orientation of this SpectrumData.  # noqa: E501
        :type: float
        """

        self._orientation = orientation

    @property
    def tilt(self):
        """Gets the tilt of this SpectrumData.  # noqa: E501

        Camera tilt in degrees  # noqa: E501

        :return: The tilt of this SpectrumData.  # noqa: E501
        :rtype: float
        """
        return self._tilt

    @tilt.setter
    def tilt(self, tilt):
        """Sets the tilt of this SpectrumData.

        Camera tilt in degrees  # noqa: E501

        :param tilt: The tilt of this SpectrumData.  # noqa: E501
        :type: float
        """

        self._tilt = tilt

    @property
    def spectrum_type(self):
        """Gets the spectrum_type of this SpectrumData.  # noqa: E501

        Spectrum type identified by user  # noqa: E501

        :return: The spectrum_type of this SpectrumData.  # noqa: E501
        :rtype: float
        """
        return self._spectrum_type

    @spectrum_type.setter
    def spectrum_type(self, spectrum_type):
        """Sets the spectrum_type of this SpectrumData.

        Spectrum type identified by user  # noqa: E501

        :param spectrum_type: The spectrum_type of this SpectrumData.  # noqa: E501
        :type: float
        """

        self._spectrum_type = spectrum_type

    @property
    def img_filename(self):
        """Gets the img_filename of this SpectrumData.  # noqa: E501

        Image filename  # noqa: E501

        :return: The img_filename of this SpectrumData.  # noqa: E501
        :rtype: str
        """
        return self._img_filename

    @img_filename.setter
    def img_filename(self, img_filename):
        """Sets the img_filename of this SpectrumData.

        Image filename  # noqa: E501

        :param img_filename: The img_filename of this SpectrumData.  # noqa: E501
        :type: str
        """

        self._img_filename = img_filename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpectrumData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpectrumData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
