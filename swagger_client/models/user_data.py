# coding: utf-8

"""
    StreetSpectra API

    API description for StreetSpectra project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jgcasta@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'role': 'str',
        'name': 'str',
        'lon_location': 'float',
        'lat_location': 'float',
        'name_location': 'str'
    }

    attribute_map = {
        'username': 'username',
        'role': 'role',
        'name': 'name',
        'lon_location': 'lon_location',
        'lat_location': 'lat_location',
        'name_location': 'name_location'
    }

    def __init__(self, username=None, role=None, name=None, lon_location=None, lat_location=None, name_location=None):  # noqa: E501
        """UserData - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._role = None
        self._name = None
        self._lon_location = None
        self._lat_location = None
        self._name_location = None
        self.discriminator = None

        self.username = username
        if role is not None:
            self.role = role
        if name is not None:
            self.name = name
        if lon_location is not None:
            self.lon_location = lon_location
        if lat_location is not None:
            self.lat_location = lat_location
        if name_location is not None:
            self.name_location = name_location

    @property
    def username(self):
        """Gets the username of this UserData.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserData.

        Username  # noqa: E501

        :param username: The username of this UserData.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def role(self):
        """Gets the role of this UserData.  # noqa: E501

        User role  # noqa: E501

        :return: The role of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserData.

        User role  # noqa: E501

        :param role: The role of this UserData.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def name(self):
        """Gets the name of this UserData.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserData.

        Name  # noqa: E501

        :param name: The name of this UserData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lon_location(self):
        """Gets the lon_location of this UserData.  # noqa: E501

        User Longitude location  # noqa: E501

        :return: The lon_location of this UserData.  # noqa: E501
        :rtype: float
        """
        return self._lon_location

    @lon_location.setter
    def lon_location(self, lon_location):
        """Sets the lon_location of this UserData.

        User Longitude location  # noqa: E501

        :param lon_location: The lon_location of this UserData.  # noqa: E501
        :type: float
        """

        self._lon_location = lon_location

    @property
    def lat_location(self):
        """Gets the lat_location of this UserData.  # noqa: E501

        User Laitude location  # noqa: E501

        :return: The lat_location of this UserData.  # noqa: E501
        :rtype: float
        """
        return self._lat_location

    @lat_location.setter
    def lat_location(self, lat_location):
        """Sets the lat_location of this UserData.

        User Laitude location  # noqa: E501

        :param lat_location: The lat_location of this UserData.  # noqa: E501
        :type: float
        """

        self._lat_location = lat_location

    @property
    def name_location(self):
        """Gets the name_location of this UserData.  # noqa: E501

        User location name  # noqa: E501

        :return: The name_location of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._name_location

    @name_location.setter
    def name_location(self, name_location):
        """Sets the name_location of this UserData.

        User location name  # noqa: E501

        :param name_location: The name_location of this UserData.  # noqa: E501
        :type: str
        """

        self._name_location = name_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
